def readProb;
pipeline {
    agent any
    environment {
        GCLOUD_CREDENTIALS = credentials('gcloud-service-account')        
    }
    stages {
        stage('SCM_Checkout_For_nodeapp') { 
            steps {
                checkout scmGit(branches: [[name: '*/master']], extensions: [], userRemoteConfigs: [[credentialsId: 'ramkumar-github-nodeapp', url: 'https://github.com/ramkumarrj/edstem-devops-task.git']])
                //slackSend(color: "good", message: "SCM Checkout completed successfully.")
            }
        }
        stage('Google Cloud Authentication') {
            steps {
                script {
                    readProb = readProperties  file:'config.properties'
                    GCloud_Auth= "${readProb['GCloud_Auth']}"
                    
                    if (GCloud_Auth == 'yes') {
                        withCredentials([file(credentialsId: 'gcloud-service-account', variable: 'GCLOUD_CREDENTIALS_FILE')]) {
                            sh ''' gcloud auth activate-service-account --key-file="$GCLOUD_CREDENTIALS_FILE" 
                                   gcloud container clusters get-credentials eds-devops-task-eds-gke --region europe-central2 --project edstem-task                                   
                            '''
                            //slackSend(color: "good", message: "Google Cloud Authentication successful.")
                        }
                    } else {
                        echo "Google Cloud Authentication Skipped"
                        //slackSend(color: "warning", message: "Google Cloud Authentication was skipped.")
                    }
                }
            }
        }   
        stage('Docker_Build_and_Push') {
            steps {
                script {
                    readProb = readProperties  file:'config.properties'
                    Docker_Build_Push= "${readProb['Docker_Build_Push']}"
                    if ("$Docker_Build_Push" == "yes") {
                        sh ''' 
                            sudo docker rmi europe-central2-docker.pkg.dev/edstem-task/expressjsapp/gcpnodeapp:latest || true
                            sudo docker build -t europe-central2-docker.pkg.dev/edstem-task/expressjsapp/gcpnodeapp:latest -f DockerFile.mynodeapp .           
                            sudo docker tag europe-central2-docker.pkg.dev/edstem-task/expressjsapp/gcpnodeapp:latest europe-central2-docker.pkg.dev/edstem-task/expressjsapp/gcpnodeapp:$BUILD_NUMBER 
                            docker push europe-central2-docker.pkg.dev/edstem-task/expressjsapp/gcpnodeapp:$BUILD_NUMBER                             
                            sudo docker rmi europe-central2-docker.pkg.dev/edstem-task/expressjsapp/gcpnodeapp:$BUILD_NUMBER              
                            '''
                        //slackSend(color: "good", message: "Docker build and push completed successfully.")
                    } else {
                        echo "Docker_Build_and_Push_Skipped"
                        //slackSend(color: "warning", message: "Docker build and push was skipped.")
                    }
                }            
            }
        }
        
        stage('Security_Scan') {
            steps {
                script {
                    readProb = readProperties file:'config.properties'
                    Run_Security_Scan = "${readProb['Run_Security_Scan']}"
                    
                    if (Run_Security_Scan == 'yes') {
                        // Assuming Sysdig Secure plugin is installed and configured
                        sysdigImageScan(
                            engineCredentialsId: 'sysdig-secure-api-token', // Your Sysdig API token credentials ID
                            imageName: "europe-central2-docker.pkg.dev/edstem-task/expressjsapp/gcpnodeapp:$BUILD_NUMBER",
                            bailOnFail: true // Fail the build if vulnerabilities are found
                        )
                       // slackSend(color: "good", message: "Security scan completed successfully.")
                    } else {
                        echo "Security scan stage skipped."
                      //  slackSend(color: "warning", message: "Security scan stage was skipped.")
                    }
                }
            }
        }

        stage('Test') {
            steps {
                script {
                    readProb = readProperties file:'config.properties'
                    Run_Tests = "${readProb['Run_Tests']}"
                    
                    if (Run_Tests == 'yes') {
                        sh '''
                            # Run your test commands here
                            npm install  # Install dependencies
                            npm test     # Run tests
                        '''
                       // slackSend(color: "good", message: "All tests completed successfully.")
                    } else {
                        echo "Test stage skipped."
                       // slackSend(color: "warning", message: "Test stage was skipped.")
                    }
                }
            }
        }
        stage('Fresh_Deployment_Kubernetes_nodeapp') {
            steps {
                script {
                    readProb = readProperties  file:'config.properties'
                    Fresh_Deploy_nodeapp= "${readProb['Fresh_Deploy_nodeapp']}"
                    
                    if (Fresh_Deploy_nodeapp == 'yes') {
                        sh '''
                            sed -i s/latest/$BUILD_NUMBER/g kubernetes/deployment.yaml
                            kubectl apply -f kubernetes/
                        '''
                        //slackSend(color: "good", message: "Fresh deployment to Kubernetes completed successfully.")
                    } else {
                        echo "Fresh-Deployment-Skipped"
                        //slackSend(color: "warning", message: "Fresh deployment to Kubernetes was skipped.")
                    }
                }
            }
        }
        stage('Update_Deployment_Kubernetes_nodeapp') {
            steps {
                script {
                    readProb = readProperties  file:'config.properties'
                    Update_Deploy_nodeapp= "${readProb['Update_Deploy_nodeapp']}"
                    
                    if (Update_Deploy_nodeapp == 'yes') {
                        sh ''' kubectl set image deployment/gcpnodeapp-deployment gcpnodeapp=europe-central2-docker.pkg.dev/edstem-task/expressjsapp/gcpnodeapp:$BUILD_NUMBER '''
                        //slackSend(color: "good", message: "Update deployment in Kubernetes completed successfully.")
                    } else {
                        echo "Update-Deployment-Skipped"
                        //slackSend(color: "warning", message: "Update deployment in Kubernetes was skipped.")
                    }
                }
            }
        }        
    }
}
